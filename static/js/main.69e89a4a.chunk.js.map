{"version":3,"sources":["logo.svg","components/login/socialLogin.js","components/login/login.js","components/home/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SocialLogin","_ref","children","triggerLogin","classname","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","onClick","Login","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSocialLogin","user","console","log","assertThisInitialized","history","replace","handleSocialLoginFailure","err","error","state","socialLogin","provider","appId","onLoginSuccess","onLoginFailure","Component","months","Home","onChange","date","setState","handleBook","alert","getDate","getMonth","getFullYear","Date","entry_default","value","App","react_router_dom","react_router","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69e89a4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport SocialLogin from 'react-social-login'\n\nconst Button = ({ children, triggerLogin, classname, ...props }) => (\n\t<button className={`social-button ${classname}-connect`} onClick={triggerLogin} {...props}>\n\t\t<span>{ children }</span>\n\t</button>\n)\n\nexport default SocialLogin(Button)\n","import React, { Component } from 'react';\nimport SocialButton from './socialLogin'\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    handleSocialLogin = (user) => {\n        console.log(user, this);\n        this.props.history.replace('/home');\n    };\n      \n    handleSocialLoginFailure = (err) => {\n        console.error(err)\n    };\n\n    render() {\n        const customHeader = {};\n        customHeader['Test'] = 'test-header';\n\n        return (\n            <div className=\"login-box\">\n                <h2>LOGIN</h2>\n\n                <SocialButton\n                    provider='facebook'\n                    appId='1329003187233913'\n                    onLoginSuccess={this.handleSocialLogin}\n                    onLoginFailure={this.handleSocialLoginFailure}\n                    classname=\"facebook\"\n                >\n                    Login with Facebook\n                </SocialButton>\n\n                <SocialButton\n                    provider='google'\n                    appId='550638670796-c8lj4poivtedicead2mp9cloku4djmjj.apps.googleusercontent.com'\n                    onLoginSuccess={this.handleSocialLogin}\n                    onLoginFailure={this.handleSocialLoginFailure}\n                    classname=\"google\"\n                >\n                    Login with Google\n                </SocialButton>\n            </div>\n        );\n    }\n}\n\n// facebook app id '1329003187233913'\n// Google app id '550638670796-c8lj4poivtedicead2mp9cloku4djmjj.apps.googleusercontent.com'\n\nexport default Login;\n","import React, { Component } from 'react';\nimport Calendar from 'react-calendar';\n\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        };\n    }\n\n    onChange = date => this.setState({ date })\n\n    handleBook = () => alert(`Appointment is booked on ${this.state.date.getDate()} ${months[this.state.date.getMonth()]} ${this.state.date.getFullYear()}`);\n\n    render() {\n        return (\n            <div className=\"home\">\n                <h2>Book your Appointment</h2>\n\n\n                <Calendar\n                    className='margin-auto'\n                    onChange={this.onChange}\n                    value={this.state.date}\n                />\n\n                <button className=\"bubbly-button\" onClick={this.handleBook}>Book</button>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport Login from './components/login/login';\nimport Home from './components/home/home';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact component={Login} />\n\t\t\t\t\t\t<Route path=\"/home/\" component={Home} />\n\t\t\t\t\t\t<Redirect to=\"/\" />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}