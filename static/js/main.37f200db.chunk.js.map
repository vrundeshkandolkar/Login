{"version":3,"sources":["logo.svg","components/login/socialLogin.js","components/login/login.js","components/home/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SocialLogin","_ref","children","triggerLogin","classname","props","Object","objectWithoutProperties","react_default","a","createElement","assign","className","concat","onClick","Login","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSocialLogin","user","console","log","assertThisInitialized","history","replace","handleSocialLoginFailure","err","error","state","socialLogin","provider","appId","onLoginSuccess","onLoginFailure","Component","months","Home","onChange","date","setState","handleBook","alert","getDate","getMonth","getFullYear","Date","entry_default","value","App","react_router_dom","react_router","path","exact","component","to","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCSzBC,WANA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,aAAcC,EAA3BH,EAA2BG,UAAcC,EAAzCC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,gDACdO,EAAAC,EAAAC,cAAA,SAAAJ,OAAAK,OAAA,CAAQC,UAAS,iBAAAC,OAAmBT,EAAnB,YAAwCU,QAASX,GAAkBE,GACnFG,EAAAC,EAAAC,cAAA,YAAQR,MCgDKa,cAjDX,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAV,OAAAW,EAAA,EAAAX,CAAAY,KAAAH,IACfC,EAAAV,OAAAa,EAAA,EAAAb,CAAAY,KAAAZ,OAAAc,EAAA,EAAAd,CAAAS,GAAAM,KAAAH,KAAMb,KAIViB,kBAAoB,SAACC,GACjBC,QAAQC,IAAIF,EAAZjB,OAAAoB,EAAA,EAAApB,QAAAoB,EAAA,EAAApB,CAAAU,KACAA,EAAKX,MAAMsB,QAAQC,QAAQ,UAPZZ,EAUnBa,yBAA2B,SAACC,GACxBN,QAAQO,MAAMD,IATdd,EAAKgB,MAAQ,GAFEhB,wEAkBf,OACIR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAACuB,EAAD,CACIC,SAAS,WACTC,MAAM,mBACNC,eAAgBlB,KAAKI,kBACrBe,eAAgBnB,KAAKW,yBACrBzB,UAAU,YALd,uBAUAI,EAAAC,EAAAC,cAACuB,EAAD,CACIC,SAAS,SACTC,MAAM,2EACNC,eAAgBlB,KAAKI,kBACrBe,eAAgBnB,KAAKW,yBACrBzB,UAAU,UALd,6BAjCIkC,8BCAdC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAgC/GC,cA7BX,SAAAA,EAAYnC,GAAO,IAAAW,EAAA,OAAAV,OAAAW,EAAA,EAAAX,CAAAY,KAAAsB,IACfxB,EAAAV,OAAAa,EAAA,EAAAb,CAAAY,KAAAZ,OAAAc,EAAA,EAAAd,CAAAkC,GAAAnB,KAAAH,KAAMb,KAMVoC,SAAW,SAAAC,GAAI,OAAI1B,EAAK2B,SAAS,CAAED,UAPhB1B,EASnB4B,WAAa,kBAAMC,MAAK,4BAAAhC,OAA6BG,EAAKgB,MAAMU,KAAKI,UAA7C,KAAAjC,OAA0D0B,EAAOvB,EAAKgB,MAAMU,KAAKK,YAAjF,KAAAlC,OAAgGG,EAAKgB,MAAMU,KAAKM,iBAPpIhC,EAAKgB,MAAQ,CACTU,KAAM,IAAIO,MAHCjC,wEAYf,OACIR,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACXJ,EAAAC,EAAAC,cAAA,mCAGAF,EAAAC,EAAAC,cAACwC,EAAAzC,EAAD,CACIG,UAAU,cACV6B,SAAUvB,KAAKuB,SACfU,MAAOjC,KAAKc,MAAMU,OAGtBlC,EAAAC,EAAAC,cAAA,UAAQE,UAAU,gBAAgBE,QAASI,KAAK0B,YAAhD,gBAxBGN,aCkBJc,gMAdb,OACC5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,KACC7C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACdJ,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,KACC9C,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW1C,IACjCP,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWjB,IAChChC,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUI,GAAG,gBARDpB,cCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.37f200db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\nimport SocialLogin from 'react-social-login'\r\n\r\nconst Button = ({ children, triggerLogin, classname, ...props }) => (\r\n\t<button className={`social-button ${classname}-connect`} onClick={triggerLogin} {...props}>\r\n\t\t<span>{ children }</span>\r\n\t</button>\r\n)\r\n\r\nexport default SocialLogin(Button)\r\n","import React, { Component } from 'react';\r\nimport SocialButton from './socialLogin'\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    handleSocialLogin = (user) => {\r\n        console.log(user, this);\r\n        this.props.history.replace('/home');\r\n    };\r\n      \r\n    handleSocialLoginFailure = (err) => {\r\n        console.error(err)\r\n    };\r\n\r\n    render() {\r\n        const customHeader = {};\r\n        customHeader['Test'] = 'test-header';\r\n\r\n        return (\r\n            <div className=\"login-box\">\r\n                <h2>LOGIN</h2>\r\n\r\n                <SocialButton\r\n                    provider='facebook'\r\n                    appId='1329003187233913'\r\n                    onLoginSuccess={this.handleSocialLogin}\r\n                    onLoginFailure={this.handleSocialLoginFailure}\r\n                    classname=\"facebook\"\r\n                >\r\n                    Login with Facebook\r\n                </SocialButton>\r\n\r\n                <SocialButton\r\n                    provider='google'\r\n                    appId='550638670796-jcrtuh8grj98fppmsfqb63fbbf21hthl.apps.googleusercontent.com'\r\n                    onLoginSuccess={this.handleSocialLogin}\r\n                    onLoginFailure={this.handleSocialLoginFailure}\r\n                    classname=\"google\"\r\n                >\r\n                    Login with Google\r\n                </SocialButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// facebook app id '1329003187233913'\r\n// Google app id '550638670796-jcrtuh8grj98fppmsfqb63fbbf21hthl.apps.googleusercontent.com'\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport Calendar from 'react-calendar';\r\n\r\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        };\r\n    }\r\n\r\n    onChange = date => this.setState({ date })\r\n\r\n    handleBook = () => alert(`Appointment is booked on ${this.state.date.getDate()} ${months[this.state.date.getMonth()]} ${this.state.date.getFullYear()}`);\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"home\">\r\n                <h2>Book your Appointment</h2>\r\n\r\n\r\n                <Calendar\r\n                    className='margin-auto'\r\n                    onChange={this.onChange}\r\n                    value={this.state.date}\r\n                />\r\n\r\n                <button className=\"bubbly-button\" onClick={this.handleBook}>Book</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport Login from './components/login/login';\r\nimport Home from './components/home/home';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Router>\r\n\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/\" exact component={Login} />\r\n\t\t\t\t\t\t<Route path=\"/home/\" component={Home} />\r\n\t\t\t\t\t\t<Redirect to=\"/\" />\r\n\t\t\t\t\t</Switch>\r\n\t\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}